---
title: "Exercise 1A: Geospatial Data Wrangling"
author: "Oh Jia Wen"
date: 11/17/2023
date-modified: 11/17/2023
---

# 1. Getting Started

## 1.1 Install and launching R packages

The code chunk below uses **p_load()** of pacman package to check if `sf` and `tidyverse` packages are installed into the R environment. If they are, then they will be launched into R.

```{r}
pacman::p_load(sf, tidyverse)
```

## 1.2 Importing Geospatial data

In this section, the following data will be imported into R through **st_read()** of sf package:

-   `MP14_SUBZONE_WEB_PL` , a polygon feature layer in ESRI shapefile format

-   `CyclingPath` , a line feature layer in ESRI shapefile format, and

-   `PreSchool` , a point feature layer in kml file format.

### 1.2.1 Importing Polygon feature data in shapefile format

The code chunk below uses **st_read()** of sf package to import `MP14_SUBZONE_WEB_PL`:

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

It can be observed that there are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. `mpsz` is in **svy21** projected coordinates systems.

### 1.2.2 Importing Polyline feature data in shapefile form

The code chunk below uses **st_read()** of sf package to import `CyclingPath` shapefile:

```{r}
cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")
```

It can be observed that there are a total of 2,558 features and 2 fields in `cyclingpath` linestring feature data frame. It is in **svy21** projected coordinates systems.

### 1.2.3 Importing GIS data in kml format

The code chunk below will be used to import the kml `(pre-schools-location-kml)` into R:

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

It can be observed that there are a total of 2,290 features and 2 fields in `preschool` point feature data frame. It is a **wgs84** coordinates systems.

# 2. Checking the Content of a Simple Feature Data Frame

After importing the various data sets, we will retrieve information related to the content of a simple feature data frame. We will be working with `st_geometry()`, `glimpse()`, and `head()`.

## 2.1 Working with st_geometry()

By using `mpsz$geom` or `mpsz[[1]]`, we can retrieve the geometry list-column which only display basic information of the feature class, such as type of geometry, geographic extent of the features and the coordinate system of the data.

```{r}
st_geometry(mpsz)
```

## 2.2 Working with glimpse ()

By using `glimpse()` of **dplyr**, we are able to learn more about the associated attribution information in the data frame. It reveals the data type of each fields *(e.g., FMEL-UPD_D is in data data type, and X_ADDR is a double-precision values)*

```{r}
glimpse(mpsz)
```

## 2.3 Working with head()

Instead of printing the complete information, `head()` allow users to select the numbers of record to display *(i.e., the n argument)*

```{r}
head(mpsz, n=5)
```

# 3. Plotting the Geospatial Data

The code chunk below uses `plot()` of R Graphic to visualize the geospatial features.

```{r}
#| code-fold: true
plot(mpsz)
```

By default, the sf object is a multi-plot of all attributes. It is possible to plot only only the geometry by using the code chunk below.

```{r}
#| code-fold: true
plot(st_geometry(mpsz))
```

Alternatively, we are able to choose the plot of sf object. For example, we could like to plot **PLN_AREA_N**.

```{r}
#| code-fold: true
plot(mpsz["PLN_AREA_N"])
```

*Note: `plot()` is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as **tmap** should be used.*

# 4. Working with Projection

Before performing geoprocessing using two geospatial data, it is crucial for us to ensure that both geospatial data are projected using similar coordinate system. Also known as **Project Transformation**, we will project a simple feature data system from one coordinate system to another coordinate system.

## 4.1 Assigning EPSG code to a simple feature data frame

In the code chunk below, it illustrates the coordinate system of `mpsz` simple feature data frame by using `st_crs()` of sf package:

```{r}
st_crs(mpsz)
```

As seen from the result, the EPSG code is inaccurate. Instead of showing [3414]{.underline} (svg21), it displays 9001 (last row). This is a common issue that could happen in the process of importing geospatial data into R. The coordinate system of the source data could be missing or wrongly assigned.

In order to rectify the EPSG code, we will use the `st_set_crs()` of sf package:

```{r}
mpsz3414 <- st_transform(mpsz, 3414)

```

To validate, we will used the code chunk below:

```{r}
st_crs(mpsz3414)

```

## 4.2 Transforming the project of preschool from wgs84 to svy21

Notably, it is common for us to transform original data from geographic coordinate system to projected coordinate system as the geographic coordinate system is not appropriate if the analysis requires distance and/or area measurements.

We performed the project transformation by using the code chunk below:

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

To display the first 5 geometries and content of the `preschool3414` data frame, we will use `head()`:

```{r}
head(preschool3414, n=5)
```

# 5. Importing and Converting an Aspatial Data

In this section, we will import an aspatial data *(not a geospatial data but contains fields that captured the x- and y-coordinates of the data points)* into the R environment and save it as a tibble dataframe. Thereafter, we will convert it into a simple feature data frame.

## 5.1 Importing the aspatial data

For the purpose of the exercise, we will be using the Singapore listing (`listings.csv`) as retrieved from AirBnb.

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

To ensure data accuracy, we will check if the data file have been imported correctly. The code chunk below uses `list()` of Base R instead of `glimpse()`.

```{r}
list(listings) 
```

**Observations:**

-   Tibble data frame consists of 3,483 rows and 18 columns

-   Useful fields for our analysis : `latitude` and `longitude` *(note: decimal degree format)*

**Assumption:**

-   Data is in **wgs84** geographic coordinate system

## 5.2 Creating a simple feature data frame from an aspatial data frame

In the code chunk below, we will be using `st_as_sf()` of sf package to convert `listing` data frame into a simple feature data frame:

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

::: callout-Note
coords : to provide x-coordinates, y-coordinates

crs : to provide the coordinates system in EPSG format.

EPSG: 4326 is wgs84 Geographic Coordinate System

EPSG : 3414 is Singapore SVY21 Projected Coordinate System.

For more information, do refer to [epsg.io](https://epsg.io/)
:::

To examine the content of our newly created simple feature data frame:

```{r}
glimpse(listings_sf)
```

**Observation:**

-   Instead of `longitude` and `latitude`, a new column called `geometry` has been added into the data frame.

# 6. Geoprocessing with sf package

In this section, we will be performing two comonly used geoprocessing functions, namely buffering and point in polygon count.

## 6.1 Buffering

*The scenario:* The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path.

*The task:* To determine the extend of the land need to be acquired and their total area.

[**The solution:**]{.underline}

In the code chunk below, we will be using `st_buffer()` of **sf** package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(cyclingpath, 
                               dist=5, nQuadSegs = 30)
```

Then, we calculate the area of the buffers:

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, we use `sum()` of Base R to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

## 6.2 Point-in-polygon count

*The scenario:* A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

[**The solution:**]{.underline}

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using `st_intersects()`. Next, `length()` of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

::: callout-warning
Be careful and do not be confuse with `st_intersection()` !
:::

We can check the summary statistics of the newly derieved *Presch Count* Field by using `summary()` as shown in the code chunk below:

```{r}
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the `top_n()` of **dplyr** package is used as shown in the code chunk below:

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

[**The solution:**]{.underline}

Step 1: Use `st_area()` of **sf** package to derive the area of each planning subzone

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Step 2: Apply `mutate()` of **dplyr** package to compute the density

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# 7. Exploratory Data Analysis (EDA) 

In this section, we will explore the data through `ggplot2` functions. We will create functional and insightful statistical graphs to aid in our exploratory progress. We will plot a histogram and a scatterplot.

## 7.1 Plotting Histogram 

To observe the distribution of PreSch Density, a histogram is insightful. We can used `hist()` of R graphics or `ggplot2` to plot.

### 7.1.1 Histogram using hist()

```{r}
#| code-fold: true
hist(mpsz3414$`PreSch Density`)
```

Despite the easy syntax, the output is far from ideal as it limits further customization.

### 7.1.2 Histogram using ggplot2()

```{r}
#| code-fold: true
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

## 7.2 Plotting Scatterplot 

To observe the relationship between Pre-school Density and Pre-school count, a scatterplot could be ideal.

```{r}
#| code-fold: true
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
