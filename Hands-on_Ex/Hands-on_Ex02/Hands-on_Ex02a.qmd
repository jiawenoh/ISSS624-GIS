---
title: "Exercise 2A: Spatial Weights and Applications"
author: "Oh Jia Wen"
date: 11/19/2023
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
---

# 1. Getting Started

## 1.1 Install and launching R packages

The code chunk below uses **p_load()** of pacman package to check if `sf`, `spdep`, `tmap`, `tidyverse` , and `knitr` packages are installed into the R environment. If they are, then they will be launched into R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## 1.2 Importing the OD data

We will be using two data sets for this exercise. Data were retrieved on 19th Nov 2023. They are :

1.  **Hunan country boundary layer\***. *(data is in ESRI shapefile format) - Geospatial data*
2.  **Hunan_2012.csv\*.** *(data is in csv file) - Attribute table*

### 1.2.1 Importing Hunan country boundary layer

The code chunk below uses `st_read()` of **sf** package to import the [1st data set]{.underline} into R. The imported shapefile will be simple features object of sf.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### 1.2.2 Importing Hunan_2012.csv

Next, we will import the [2nd dataset (csv)]{.underline} into R. We will use `read_csv()` of **readr** package. The output is in R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 1.3 Performing relational join

After importing, we will update the attribute table of **hunan**'s Spatial Polygons Data Frame with the attribute fields of **hunan2012** dataframe. We will performed a `left_join()` with the aid of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4,7,15)
```

We will be joining both tables by County. By doing the left_join, we will combined the 8 variables from **hunan**, with 29 variables from **hunan2012** and uses `select()` to filter for the variables that we are interested in.

# 2. Visualising Regional Development Indicator

In this section, we will be preparing a basemap and a choropleth map to show the distribution of GDPPC 2012 by using `qtm()` of **tmap** package.

```{r}
#| code-fold: true
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

**Observations:**

-   **Changsha** has the highest density.

-   Based on the geographic location, we could infer that their strategic location could indirectly boost the GDPPC of the nearby cities.

# 3. Computing Contiguity Spatial Weights

In this section, we will be using `poly2nb()` of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neighbors list based on regions with contiguous boundaries.

We are able to pass a 'queen' argument with 'TRUE' or 'FALSE' as options. Without specification, the default will be TRUE. If you do not specify queen - FALSE, the function will return a list of first order neighbors using the queen criteria.

## 3.1 Computing (QUEEN) contiguity based neighbors

The code chunk below is used to compute Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

**Observations:**

-   Summary report highlights 88 area units in Hunan.

-   1 most connected region with 11 neighbors, and

-   2 least connected regions with only 1 neighbor.

For each polygon in our polygon object, **wm_q** lists all neighboring polygons. E.g., to see the neighbors of the first polygon in the object, we could use the following code:

```{r}
wm_q[[1]]
```

From the output, we observed that polygon 1 have 5 neighbors. The respective polygons ID are stored in the hunan Spatial Polygons Data Frame Class.

To retrieve the country name of Polygon ID = 1, we can use the following code:

```{r}
hunan$County[1]
```

The output shows that Polygon ID = 1 is Anxiang country. To know more about the five neighboring polygons that we have identified with, the below code chunk will be used:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

Similarly, we are able to retrieve the GDPPC of these five countries by using the code chunk below:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

Additionally, we can display the complete weight matrix by using `str()` . For the purpose of this exercise, we will add [\[0:10\]]{.underline} to display the first 10 list instead of the full 88.

```{r}
str(wm_q[0:10])
```

## 3.2 Creating (ROOK) contiguity based neighbors

The code chunk below will be used to compute Rook contiguity weight matrix.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

**Observations:**

-   Summary report highlights 88 area units in Hunan.

-   Similar to ***section 3.1*** in terms of area units and least connected regions.

-   Differs in the most connected area as **Rook** shows 10 neighbors whereas **Queen** shows 11 neighbors.

## 3.3 Visualising contiguity weights

We will be using **sf** package to get the latitude and longitude of the polygon centroids which allow us to take a point and display a line to each neighboring point. To do so, we would require the coordinates in a separate data frame, and apply a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length.

Our input vector will be geometry column of **us.bound** while our function will be **st_centroid**. Additionally, we will be using **map_dbl** variation of map from the purrr package.

To get our longitude value, we map the **st_centroid** function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1 which allows us to get the first value in each centroid and the longitude.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

Similarly, we use the same approach to get latitude. However, we will replace 1 with 2.

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

With longitude and latitude, we can combine them through `cbind()` to put longitude and latitude into the same object and use `head()` to check the first few observations.

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

## 3.4 Plotting Contiguity based neighbors map

We will be plotting the contiguity based neighbors map for **Queen**, and **Rock**. Ideally, we are able to plot individually, or combined them together.

::: panel-tabset
## Queen

```{r}
#| code-fold: true
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

## Rook

```{r}
#| code-fold: true
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Queen and Rook

```{r}
#| code-fold: true
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red", main="Queen Contiguity") 

plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red", main="Rook Contiguity")
```
:::

# 4. Compute fixed distance based neighbors

In this section, we will be using `dnearneigh()` of **spdep** package to derive distance-based weight matrices.

Also, we note that the function identifies neighbours of region points by Euclidean distance with a distance band where [d1= lower bound]{.underline}, and [d2= upper bound]{.underline}. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and [longlat=TRUE,]{.underline} great circle distances in **km** will be calculated assuming the WGS84 reference ellipsoid.

**The following steps will be performed :**

1.  Determine the cut-off distance

2.  Compute fixed distance weight matrix

3.  Plot fixed distance weight matrix

Note: fixed distance is more useful in smoothing the neighbor relation across multiple neighbors as densely area tends to have more neighbors and vice versa

::: panel-tabset
## Step 1

We will begin the computation by determining the upper limit for the distance band through the following steps :

-   Return a matrix with the indices of point belonging to the set of the k nearest neighbors by using `knearneigh()` of **spdep**.

-   Convert the **knn** object return by `knearneigh()` into a neighbors list of class nb with a list of integer vectors containing neighbor region number ids by using `knn2nb()`.

-   Return the length of neighbor relationship edges by using `nbdists()` of **spdep**.

-   Remove the list structure of the return object by using `unlist()`.

```{r}
#| code-fold: true
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

As observed, the maximum distance is 61.79km (our upper threshold to ensure that all units have at least one neighbor.

## Step 2

Next, we will compute the distance weight matrix by using `dnearneigh()` :

```{r}
#| code-fold: true
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62

```

To display the structure of the weight matrix : we can use str() or combine table() and card() of spdep package. In the example below, we wil use the latter:

```{r}
#| code-fold: true
table(hunan$County, card(wm_d62))
```

On average, we could see that the all units have 3-4 neighbors.

## Step 3

Thereafter, we will plot the distance weight matrix by using the code below:

```{r}
#| code-fold: true
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

As seen above, the red line indicates the 1st nearest neighbors while the black lines indicate the links of neighbors that are within the upper bound (61.79km)

## (Optional)

Alternatively, we can plot both lines next to one another:

```{r}
#| code-fold: true
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey")
plot(k1, coords, add=TRUE, col="red", length=0.08, main="1st nearest neighbours")
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6, main="Distance link")
```
:::

# 5. Compute adaptive distance weight matrix

Unlike the previous section, we do not do need to perform the first step in determining the cut-off distance. As shown in the code chunk below, we will control the number of neighbors directly using k-nearest neighbors, either by accepting [*asymmetric neighbors*]{.underline} or [*imposing symmetr*]{.underline}y.

**The following steps will be performed :**

1.  Compute adaptive distance weight matrix

2.  Plot adaptive distance weight matrix

::: panel-tabset
## Step 1

We will begin with the following step :

-   Return a matrix with the indices of point belonging to the set of the k nearest neighbors by using `knearneigh()` of **spdep**.

```{r}
#| code-fold: true
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

To check if all coutry have exactly six neighbors *(k= 6)*, we can display the content of the matrix using `str()` :

```{r}
#| code-fold: true
str(knn6)
```

## Step 2

Thereafter, we will plot the distance weight matrix by using the code below:

```{r}
#| code-fold: true
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")

```
:::

# 6. Weights based on IDW

In this section, we will derive a spatial weight matrix based on Inversed Distance method.

**The following steps will be performed :**

1.  Compute the distances between areas (by using `nbdist()` of **spdep**)

2.  Assign weights to each neighboring polygon (by using `nb2listw()` of **spdep**)

3.  Plot fixed distance weight matrix

::: panel-tabset
## Compute Distance

```{r}
#| code-fold: true
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Assign Weights

Weights are assigned based on the fraction of 1/#no.of neighbors to each neighboring country then summing the weighted income values.

For the example below, we will used [*style = 'W'*]{.underline} option *(note: there are robust options available). By adding '**Zero.police = TRUE',** we are allowing list of non-neighbors.*

```{r}
#| code-fold: true
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

To see the weight of the first polygon's eight neighbor type:

```{r}
rswm_q$weights[10]
```

Using the same method, we can derive a row standardize distance weight matrix:

```{r}
#| code-fold: true
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

To identify the weight of the first list:

```{r}
rswm_ids$weights[1]
```

To view the summary :

```{r}
summary(unlist(rswm_ids$weights))
```
:::

# 7. Application of Spatial Weight Matrix

In this section, we will create four different spatial lagged variables, namely:

1.  spatial lag with row-standardized weights

2.  spatial lag as a sum of neighboring values

3.  spatial window average, and

4.  spatial window sum

## 7.1 Spatial leg with row-standarized weights

::: panel-tabset
# Process

[**Step 1:**]{.underline} Compute average neighbor GDPP value for each polygon. Often, these values are referred to as *spatially lagged values*.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

[**Step 2:**]{.underline} Append spatially lag GDPPC values onto hunan sf data frame

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

[**Step 3:**]{.underline} Verify data frame

```{r}
head(hunan)
```

# Output

```{r}
#| code-fold: true
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```
:::

## 7.2 Spatial lag as sum of neighboring values

::: panel-tabset
# Process

To begin, we can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the `nb2listw()` function to explicitly assign these weights.

[**Step 1:**]{.underline} apply `lapply()` function to assign a value of 1 for each neighbor

[**Step 2:**]{.underline} apply `nb2listw()` function to explicitly assign these weights.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

[**Step 3:**]{.underline} use `lag.listw()` to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

[**Step 4**]{.underline}: examine the result

```{r}
lag_sum
```

[**Step 5:**]{.underline} Append the *lag_su*m GDPPC into ***hunan*** sf data frame

```{r}
hunan <- left_join(hunan, lag.res)
```

# Output

```{r}
#| code-fold: true
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```
:::

## 7.3 Spatial window average

The spatial window average uses row-standardized weights and includes the diagonal element.

::: panel-tabset
# Process

[**Step 1:**]{.underline} add diagonal element to the neighbor list by using `include.self()` from **spdep**

```{r}
wm_qs <- include.self(wm_q)
```

[**Step 2:**]{.underline} Check neighbor list of area \[1\]

```{r}
wm_qs[[1]]
```

[**Step 3:**]{.underline} Obtain weights with `nb2listw()`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

[**Step 4:**]{.underline} create lag variable from our **weight structure** and **GDPPC variable**

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

[**Step 5:**]{.underline} convert **lag variable listw** object into a dataframe by using `as.data.frame()`

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

[**Step 6:**]{.underline} append **lag_window_avg** GDPPC values onto hunan sf data frame using `left_join()`

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

[**Step 7:**]{.underline} compare values of **lag GDPPC** and **Spatial window average** by using `kable()` of **Knitr** package

```{r}
hunan %>%
  select("County", "lag GDPPC", "lag_window_avg GDPPC") %>%
  kable()
```

# Output

Plot ***lap_gdppc*** and ***w_ave_gdppc*** maps by using `qtm()` of **tmap** package

```{r}
#| code-fold: true
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```
:::

## 7.4 Spatial window sum

The spatial window sum is the counter part of the window average, but without using row- standardized weights.

::: panel-tabset
# Process

[**Step 1:**]{.underline} add diagonal element to the neighbor list by using `include.self()` from **spdep**

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

[**Step 2:**]{.underline} Assign binary weights to the neighbor structure that includes the diagonal element

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

[**Step 3:**]{.underline} Explicitly assign weight values by using `nb2listw()` and `glist()`

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

[**Step 4:**]{.underline} compute lag variable with `lag.listw()`

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

[**Step 6:**]{.underline} convert ***lag variable listw*** object into a dataframe by using `as.data.frame()`

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

[**Step 7:**]{.underline} append ***w_sum GDPPC*** values into hunan sf data frame by using `left_join()`

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

[**Step 8:**]{.underline} compare values of ***lag GDPPC*** and ***Spatial window average***, `kable()` of **Knitr** package is used to prepare a table

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

# Output

Plot ***lap_sum GDPPC*** and ***w_sum_gdppc*** maps by using `qtm()` of **tmap** package

```{r}
#| code-fold: true
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)

```
:::
