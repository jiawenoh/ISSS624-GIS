---
title: "Exercise 2B: Global Measures of Spatial Autocorrelation"
author: "Oh Jia Wen"
date: 11/20/2023
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
---

# 1. Getting Started

## 1.1 Install and launching R packages

The code chunk below uses **p_load()** of pacman package to check if `sf`, `spdep`, `tmap`, and `tidyverse` packages are installed into the R environment. If they are, then they will be launched into R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

## 1.2 Importing the OD data

We will be using two data sets for this exercise. Data were retrieved on 19th Nov 2023. They are :

1.  **Hunan country boundary layer\***. *(data is in ESRI shapefile format) - Geospatial data*
2.  **Hunan_2012.csv\*.** *(data is in csv file) - Attribute table*

In this exercise, we are interested to examine the spatial pattern of GDPPC (a.k.a GPD per Capital) of Hunan Provice, People Republic of China.

### 1.2.1 Importing Hunan country boundary layer

The code chunk below uses `st_read()` of **sf** package to import the [1st data set]{.underline} into R. The imported shapefile will be simple features object of sf.

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

### 1.2.2 Importing Hunan_2012.csv

Next, we will import the [2nd dataset (csv)]{.underline} into R. We will use `read_csv()` of **readr** package. The output is in R dataframe class.

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## 1.3 Performing relational join

After importing, we will update the attribute table of **hunan**'s Spatial Polygons Data Frame with the attribute fields of **hunan2012** dataframe. We will performed a `left_join()` with the aid of **dplyr** package.

```{r}
hunan <- left_join(hunan,hunan2012) %>%
  select(1:4,7,15)
```

We will be joining both tables by County. By doing the left_join, we will combined the 8 variables from **hunan**, with 29 variables from **hunan2012** and uses `select()` to filter for the variables that we are interested in.

## 1.4 Visualising Regional Development Indicator

After joining, we will do a quick visualization. We will be using the `qtm()` of **tmap** package to prepare a basemap and a choropleth map to see the distribution of ***GDPPC 2012***.

```{r}
#| code-fold: true
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

# 2. Global Spatial Autocorrelation

In this section, we will compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

## 2.1 Computing Contiguity Spatial Weights

To begin with, we are require to construct a spatial weights of the study area. The spatial weights is used to define the neighborhood relationships between the geographical units (i.e. county) in the study area. We will be using `poly2nb()` of **spdep** package to compute ***QUEEN*** contiguity weight matrices for the study area.

```{r}
wm_q <- poly2nb(hunan, 
                queen=TRUE)
summary(wm_q)
```

**Observations:**

-   Summary report highlights 88 area units in Hunan.

-   1 most connected region with 11 neighbors, and

-   2 least connected regions with only 1 neighbor.

## 2.2 Row-standardised weights matrix

Next, we would need to assign weights to each neighboring polygon. Weights are assigned based on the fraction of 1/#no.of neighbors to each neighboring country then summing the weighted income values.

For the example below, we will used [*style = 'W'*]{.underline} option *(note: there are robust options available). By adding '**Zero.police = TRUE',** we are allowing list of non-neighbors.*

```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
rswm_q
```

::: {.callout-note title="Note about nb2listw() " collapse="true"}
## Note about `nb2listw()`

`nb2listw()` has two major arguments, namely **style** and **zero.policy**.

**There are 6 Styles, namely:**

1.  "W" : row standardize (sum over all links to n)

2.  "B" : basic binary coding

3.  "C" : globally standardised (sum over all links to n)

4.  "U" : is equal to C divided by the number of neighbors (sum over all links to unity)

5.  "minmax" : the min, and max

6.  "S" : variance-stabilizing coding scheme

**The default setting for zero.policy**:

-   'NULL' : **(default)**, uses global option value

-   'TRUE' : permit the weights list to be formed with zero-length weights vectors

-   'FALSE' : stop with error for any empty neighbors sets

Refer [here](https://r-spatial.github.io/spdep/reference/nb2listw.html) for more information.
:::

## 2.3 Moran's I Statistics test

There are two tests that we could perform. In this section, we will cover the Moran's I test. We will be using `moran.test()` of **spdep** to perform the statistical test.

::: panel-tabset
# Moran's I Test

We will perform Moran's I statistical testing using `moran.test()` of **spdep**:

```{r}
#| code-fold: true
moran.test(hunan$GDPPC, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

As observed, we can reject the null hypothesis (Ho) as the p-value is smaller than the alpha value.

# Monte Carlo Moran's I

We will perform permutation test for Moran's statistic by using `moran.mc()` of **spdep**. A total of 1000 simulation will be performed:

```{r}
#| code-fold: true
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

As observed, we can reject the null hypothesis (Ho) as the p-value is smaller than the alpha value.

# Visualisation

We will be examining the simulated Moran's I test statistic by plotting the distribution of the statistical values through a histogram:

```{r}
#| code-fold: true
#print mean
cat('The mean is:', mean(bperm$res[1:999]),'\n')
#print variance
cat('The variance is:', var(bperm$res[1:999]), '\n')
#print summary
cat('Summary Report\n')
summary(bperm$res[1:999])
```

```{r}
#| code-fold: true
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```
:::

## 2.4 Geary's Statistics Test

In this section, we will cover the Geary's C test. We will be using `geary.test()` of **spdep** to perform the statistical test.

::: panel-tabset
# Geary's C Test

We will perform Geary's C statistical testing using `geary.test()` of **spdep**:

```{r}
#| code-fold: true
geary.test(hunan$GDPPC, listw=rswm_q)
```

# Monte Carlo Geary's C

We will perform permutation test for Geary's statistic by using `geary.mc()` of **spdep**. A total of 1000 simulation will be performed:

```{r}
#| code-fold: true
set.seed(1234)
gperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
gperm
```

# Visualisation

We will be examining the simulated Geary's C test statistic by plotting the distribution of the statistical values through a histogram:

```{r}
#| code-fold: true
#print mean
cat('The mean is:', mean(gperm$res[1:999]),'\n')
#print variance
cat('The variance is:', var(gperm$res[1:999]), '\n')
#print summary
cat('Summary Report\n')
summary(gperm$res[1:999])
```

```{r}
#| code-fold: true
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```
:::

# 3. Spatial Correlogram

In this section, we will use `sp.correlogram()` of **spdep** package to compute a 6-lag spatial correlogram of GDPPC.

## 3.1 Compute Moran's I correlogram

The global spatial autocorrelation used in Moran's I. For the graph, we will use `plot()` of base graph.

```{r}
#| code-fold: true
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

To get a better interpretation of the output, we can examine the full analysis by printing the results.

```{r}
print(MI_corr)
```

## 3.2 Compute Geary's C correlogram

The global spatial autocorrelation used in Geary's C. For the graph, we will use `plot()` of base graph.

```{r}
#| code-fold: true
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

To get a better analysis,

```{r}
print(GC_corr)
```
