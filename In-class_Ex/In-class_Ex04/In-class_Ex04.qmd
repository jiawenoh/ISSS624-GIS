---
title: "In-class Exercise 4"
author: "Oh Jia Wen"
date: 12/9/2023
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
---

# 1. Getting Started

## 1.1 Install and launching R packages

The code chunk below uses **p_load()** of pacman package to check if the packages below are installed into the R environment. If they are, then they will be launched into R.

```{r}
pacman::p_load(tmap, sf, httr,tidyverse)
```

## 1.2 Importing the data

### 1.2.1 Import School Data 

```{r}
#| eval: false
url <- "https://www.onemap.gov.sg/api/common/elastic/search"

csv <- read_csv("data/aspatial/Generalinformationofschools.csv")
postcodes <- csv$postal_code

found <- data.frame()
not_found <- data.frame()

for (postcode in postcodes) {
  query <- list('searchVal'=postcode, 'returnGeom'='Y', 'getAddrDetails'='Y', 'pageNum'='1')
  res <- GET(url, query=query)
  
  if ((content(res)$found)!=0){
    found <- rbind(found, data.frame(content(res))[4:13])
  } else {
    not_found = data.frame(postcode)
  }
}

```

Next, we will combine both *found* and *not_found* data.frame into a single tibble data.frame called **merged**.

```{r}
#| eval: false
merged = merge(csv, found, by.x ='postal_code', by.y = 'results.POSTAL', all = TRUE)
write.csv(merged, file= 'data/aspatial/schools.csv')
write.csv(not_found, file = 'data/aspatial/not_found.csv')
```

Then, we will import the school.csv. into R environment.

```{r}
schools <- read_csv("data/aspatial/schools.csv") %>%
  rename(latitude = 'results.LATITUDE', longitude ='results.LONGITUDE') %>%
  select(postal_code, school_name, latitude, longitude)
```

### 1.2.2 Import MPSZ

```{r}
mpsz <- st_read(dsn = 'data/geospatial', layer = 'MPSZ-2019') %>%
  st_transform(crs= 3414)
```

## 1.3 Convert an aspatial data into sf tibble data.frame

Next, we will convert the aspatial data into a simple feature data frame called *schools_sf*.

```{r}
schools_sf <- st_as_sf(schools, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)

#longitude before latitude 
```

## 1.4 Plotting a point simple feature layer

To ensure that **schools sf** tibble data frame has been projected and converted correctly, we will plot the schools point data for visual inspection.

```{r}
tmap_mode("view")
qtm(schools_sf) +
  tm_view(set.zoom.limits = c(11,14))
tmap_mode('plot') 
#to reduce resources consume
```

Next, we will count the number of schools within the planning sub zone.

```{r}
mpsz$'SCHOOL_COUNT' <- lengths(
  st_intersects(mpsz,schools_sf)
)

summary(mpsz$SCHOOL_COUNT)
```

```{r}
business_sf <- st_read(dsn = "data/geospatial",
                       layer = "Business")
```

```{r}
tmap_options(check.and.fix = TRUE) #force close polygon 
tm_shape(mpsz) +  #base layer
  tm_polygons() +  #plot the polygon then point 
  tm_shape(business_sf) +
  tm_dots()
```

```{r}
summary(mpsz$SCHOOL_COUNT)
```

# 2. Exercise on SIM

## 2.1 Install and launch R Packages 

```{r}
pacman::p_load(tmap, sf, performance, ggpubr,tidyverse)
```

## 2.2 Importing data 

```{r}
flow_data <- read_rds("data/rds/flow_data_tidy.rds")
```

Next, we will use glimpse() to examine the data. Also, we will rename Morning_PEAK, and dist.

```{r}
glimpse(flow_data)
```

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ== flow_data$DESTIN_SZ, 
  0, flow_data$MORNING_PEAK)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ,
  0.000001,1)

inter_zonal_flow <- flow_data %>%
  filter (FlowNoIntra > 0 )

inter_zonal_flow <- inter_zonal_flow %>%
  rename(TRIPS = MORNING_PEAK,
         DIST = dist) 

```

Tip: Remember to save the output and use evaluation = false.

## 2.3 Origin (Production) constrained SIM

Next, we will construct the origin constrained model.

```{r}
orcSIM_Poisson <- glm(formula = TRIPS ~
                        ORIGIN_SZ +
                        log(SCHOOL_COUNT) + 
                        log(RETAIL_COUNT) +
                        log(DIST) -1, #to remove intersect 
                      family = poisson(link ='log'),
                      data = inter_zonal_flow,
                      na.action = na.exclude)

summary(orcSIM_Poisson)
options(max.print = 1000000)
```

## 2.4 Goodness-of-Fit

We will fit an origin constraint SIM.

```{r}
CalcRSquared <- function(observed,estimated) {
  r <- cor(observed, estimated)
  R2 <- r^2
  R2
}
```

We can now examine how the constraints hold for destination this time.

```{r}
CalcRSquared(orcSIM_Poisson$data$TRIPS, orcSIM_Poisson$fitted.values)
```

```{r}
performance_rmse(orcSIM_Poisson,
                 normalized = FALSE)
```

## 2.5 Doubly Constrained

We will fit a doubly constrained SIM by using the code chunk below.

```{r}
dbsSIM_Poisson <- glm(formula = TRIPS ~
                        ORIGIN_SZ +
                        DESTIN_SZ +
                        log(DIST),
                      family = poisson(link = 'log'),
                      data = inter_zonal_flow,
                      na.action = na.exclude)

dbsSIM_Poisson
```

Another useful model,

```{r}
#unconstrained = uncSIM,
model_list <- list (
                    originConstrained = orcSIM_Poisson,
                    doublyConstrained = dbsSIM_Poisson)
```

```{r}
compare_performance(model_list,
                    metrics = 'RMSE')
```
